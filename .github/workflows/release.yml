name: Create release as draft

on:
  workflow_dispatch:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
    branches:  # TODO: Remove
      - "dev/release"

jobs:
  release:
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
        format: ['bin']
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
#          - target: x86_64-pc-windows-msvc
#            format: msi
#            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
#          - target: aarch64-pc-windows-msvc
#            format: msi
#            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{matrix.target}}
          rustflags: ''  # Keep, as otherwise the defaults will be used

      - name: Setup nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "*"

      - name: Build nur binary
        shell: nu {0}
        id: release
        run: |
          let bin = "nur"
          let os = $env.OS
          let target = $env.TARGET
          let format = $env.FORMAT
          let src = $env.GITHUB_WORKSPACE
          let version = (open Cargo.toml | get package.version)
          let suffix = if $os == 'windows-latest' { '.exe' }
          let nur_bin = $'target/($target)/release/($bin)($suffix)'
          let executables: glob = $'target/($target)/release/($bin)*($suffix)'
          let dist = $'($env.GITHUB_WORKSPACE)/output'
          let dest = $'($bin)-($version)-($target)'

          print $'Packaging ($bin) v($version) for ($target) in ($src)...'
          
          print $'Preparing build dependencies...'
          match [$os, $target] {
            ["ubuntu-latest", "aarch64-unknown-linux-gnu"] => {
              sudo apt update
              sudo apt install -y gcc-aarch64-linux-gnu
            }
          }

          print $'Start building ($bin)...'
          match $format {
            "bin" => {
              cargo build --release --all --target $target
            }
            "msi" => {
              cargo install cargo-wix
              cargo build --release --all  # wix needs target/release
              cargo wix --no-build --nocapture --package $bin --output #TODO
            }
          }
          

          print $'Check ($bin) version...'
          let ver = do { $nur_bin --version } | str join
          if ($ver | str trim | is-empty) {
            print $'(ansi r)Incompatible arch: cannot run ($bin)(ansi reset)'
          } else {
            print $ver
          }

          print $'Cleanup release...'
          rm -rf ...(glob $'target/($target)/release/*.d')
                    
          print $'Copying ($bin) and other release files to ($dist)...'
          mkdir $dest
          [README.md LICENSE ...(glob $executables)] | each {|it| cp -rv $it $dest } | flatten
          
          print $'Creating release archive...'
          mut archive
          match $os {
            "windows-latest" => {
              $archive = $'($dist)/($dest).zip'
              7z a $archive $dest
            }
            _ => {
              $archive = $'($dist)/($dest).tar.gz'
              tar -czf $archive $dest
            }
          }
          
          print $'Provide archive to GitHub...'
          print $' -> archive: ($archive)'
          ls $archive
          echo $"archive=($archive)" | save --append $env.GITHUB_OUTPUT          

        env:
          OS: ${{ matrix.os }}
          REF: ${{ github.ref }}
          TARGET: ${{ matrix.target }}
          FORMAT: ${{ matrix.format }}

      - name: Publish archives into draft release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: true
          name: "Release ${{ github.ref_name }}"
          generate_release_notes: true
          files: ${{ steps.release.outputs.archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
